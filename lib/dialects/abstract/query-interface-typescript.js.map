{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-interface-typescript.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize';\nimport type { AbstractQueryGenerator } from './query-generator';\nimport type { CreateSchemaOptions, QueryInterfaceOptions } from './query-interface.types';\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryInterface class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryInterface} instead.\n */\nexport class AbstractQueryInterfaceTypeScript {\n  readonly sequelize: Sequelize;\n  readonly queryGenerator: AbstractQueryGenerator;\n\n  constructor(options: QueryInterfaceOptions) {\n    this.sequelize = options.sequelize;\n    this.queryGenerator = options.queryGenerator;\n  }\n\n  /**\n   * Creates a new database schema.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this command will do nothing.\n   *\n   * @param schema\n   * @param options\n   */\n  async createSchema(schema: string, options?: CreateSchemaOptions): Promise<void> {\n    const sql = this.queryGenerator.createSchemaQuery(schema, options);\n    await this.sequelize.queryRaw(sql, options);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASO,MAAM,iCAAiC;AAAA,EACnC;AAAA,EACA;AAAA,EAET,YAAY,SAAgC;AAC1C,SAAK,YAAY,QAAQ;AACzB,SAAK,iBAAiB,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,aAAa,QAAgB,SAA8C;AAC/E,UAAM,MAAM,KAAK,eAAe,kBAAkB,QAAQ,OAAO;AACjE,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AACF;",
  "names": []
}
