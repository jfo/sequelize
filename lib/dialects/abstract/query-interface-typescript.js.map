{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-interface-typescript.ts"],
  "sourcesContent": ["import { QueryTypes } from '../../query-types';\nimport type { QueryRawOptions, Sequelize } from '../../sequelize';\nimport type { AbstractQueryGenerator } from './query-generator';\nimport type { QueryWithBindParams } from './query-generator.types';\nimport type { CreateSchemaOptions, QueryInterfaceOptions, ShowAllSchemasOptions } from './query-interface.types';\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryInterface class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryInterface} instead.\n */\nexport class AbstractQueryInterfaceTypeScript {\n  readonly sequelize: Sequelize;\n  readonly queryGenerator: AbstractQueryGenerator;\n\n  constructor(options: QueryInterfaceOptions) {\n    this.sequelize = options.sequelize;\n    this.queryGenerator = options.queryGenerator;\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and mariadb, this command will create what they call a database.\n   *\n   * @see\n   * {@link Model.schema}\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async createSchema(schema: string, options?: CreateSchemaOptions): Promise<void> {\n    const sql = this.queryGenerator.createSchemaQuery(schema, options);\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and mariadb, this drop a table matching the schema name.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async dropSchema(schema: string, options?: QueryRawOptions): Promise<void> {\n    const dropSchemaQuery: string | QueryWithBindParams = this.queryGenerator.dropSchemaQuery(schema);\n\n    let sql: string;\n    let queryRawOptions: undefined | QueryRawOptions;\n    if (typeof dropSchemaQuery === 'string') {\n      sql = dropSchemaQuery;\n      queryRawOptions = options;\n    } else {\n      sql = dropSchemaQuery.query;\n      queryRawOptions = { ...options, bind: dropSchemaQuery.bind };\n    }\n\n    await this.sequelize.queryRaw(sql, queryRawOptions);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and mariadb, this will show all databases.\n   *\n   * @param options\n   *\n   * @returns list of schemas\n   */\n  async showAllSchemas(options?: ShowAllSchemasOptions): Promise<string[]> {\n    const showSchemasSql = this.queryGenerator.listSchemasQuery(options);\n    const queryRawOptions = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SELECT,\n    };\n\n    const schemaNames = await this.sequelize.queryRaw(showSchemasSql, queryRawOptions);\n\n    return schemaNames.flatMap((value: any) => (value.schema_name ? value.schema_name : value));\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2B;AAWpB,MAAM,iCAAiC;AAAA,EACnC;AAAA,EACA;AAAA,EAET,YAAY,SAAgC;AAC1C,SAAK,YAAY,QAAQ;AACzB,SAAK,iBAAiB,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,aAAa,QAAgB,SAA8C;AAC/E,UAAM,MAAM,KAAK,eAAe,kBAAkB,QAAQ,OAAO;AACjE,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,WAAW,QAAgB,SAA0C;AACzE,UAAM,kBAAgD,KAAK,eAAe,gBAAgB,MAAM;AAEhG,QAAI;AACJ,QAAI;AACJ,QAAI,OAAO,oBAAoB,UAAU;AACvC,YAAM;AACN,wBAAkB;AAAA,IACpB,OAAO;AACL,YAAM,gBAAgB;AACtB,wBAAkB,EAAE,GAAG,SAAS,MAAM,gBAAgB,KAAK;AAAA,IAC7D;AAEA,UAAM,KAAK,UAAU,SAAS,KAAK,eAAe;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,eAAe,SAAoD;AACvE,UAAM,iBAAiB,KAAK,eAAe,iBAAiB,OAAO;AACnE,UAAM,kBAAkB;AAAA,MACtB,GAAG;AAAA,MACH,KAAK;AAAA,MACL,MAAM,8BAAW;AAAA,IACnB;AAEA,UAAM,cAAc,MAAM,KAAK,UAAU,SAAS,gBAAgB,eAAe;AAEjF,WAAO,YAAY,QAAQ,CAAC,UAAgB,MAAM,cAAc,MAAM,cAAc,KAAM;AAAA,EAC5F;AACF;",
  "names": []
}
