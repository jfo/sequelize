{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nimport { normalizeDataType } from '../abstract/data-types-utils';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments.js';\nimport { MariaDbQueryGeneratorTypeScript } from './query-generator-typescript';\n\nconst _ = require('lodash');\n\nexport class MariaDbQueryGenerator extends MariaDbQueryGeneratorTypeScript {\n\n  _getTechnicalSchemaNames() {\n    return ['MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'mysql', 'information_schema', 'performance_schema'];\n  }\n\n  addColumnQuery(table, key, dataType, options = {}) {\n    const ifNotExists = options.ifNotExists ? 'IF NOT EXISTS' : '';\n\n    dataType = {\n      ...dataType,\n      type: normalizeDataType(dataType.type, this.dialect),\n    };\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      ifNotExists,\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key,\n      }),\n      ';',\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName, options = {}) {\n    const ifExists = options.ifExists ? 'IF EXISTS' : '';\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      ifExists,\n      this.quoteIdentifier(attributeName),\n      ';',\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {string}               column  The JSON column\n   * @param   {string|Array<string>} [path]  The path to extract (optional)\n   * @returns {string}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const quotedColumn = this.isIdentifierQuoted(column)\n      ? column\n      : this.quoteIdentifier(column);\n\n    const pathStr = this.escape(['$']\n      .concat(_.toPath(path))\n      .join('.')\n      .replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n\n    return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,8BAAkC;AAClC,gCAAiC;AACjC,wCAAgD;AAEhD,MAAM,IAAI,QAAQ,QAAQ;AAEnB,MAAM,8BAA8B,kEAAgC;AAAA,EAEzE,2BAA2B;AACzB,WAAO,CAAC,SAAS,sBAAsB,sBAAsB,SAAS,sBAAsB,oBAAoB;AAAA,EAClH;AAAA,EAEA,eAAe,OAAO,KAAK,UAAU,UAAU,CAAC,GAAG;AACjD,UAAM,cAAc,QAAQ,cAAc,kBAAkB;AAE5D,eAAW;AAAA,MACT,GAAG;AAAA,MACH,UAAM,2CAAkB,SAAS,MAAM,KAAK,OAAO;AAAA,IACrD;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,KAAK,WAAW,KAAK;AAAA,MACrB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB,GAAG;AAAA,MACxB,KAAK,eAAe,UAAU;AAAA,QAC5B,SAAS;AAAA,QACT,WAAW;AAAA,QACX,YAAY;AAAA,MACd,CAAC;AAAA,MACD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,WAAW,eAAe,UAAU,CAAC,GAAG;AACxD,UAAM,WAAW,QAAQ,WAAW,cAAc;AAElD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,KAAK,WAAW,SAAS;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB,aAAa;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,wBAAwB,QAAQ,MAAM;AACpC,UAAM,eAAe,KAAK,mBAAmB,MAAM,IAC/C,SACA,KAAK,gBAAgB,MAAM;AAE/B,UAAM,UAAU,KAAK,OAAO,CAAC,GAAG,EAC7B,OAAO,EAAE,OAAO,IAAI,CAAC,EACrB,KAAK,GAAG,EACR,QAAQ,wBAAwB,CAAC,IAAI,UAAU,IAAI,QAAQ,CAAC;AAE/D,WAAO,6BAA6B,gBAAgB;AAAA,EACtD;AACF;",
  "names": []
}
