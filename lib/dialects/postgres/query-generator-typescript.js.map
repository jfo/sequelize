{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/query-generator-typescript.ts"],
  "sourcesContent": ["import { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport type { RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class PostgresQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  describeTableQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT',\n      'pk.constraint_type as \"Constraint\",',\n      'c.column_name as \"Field\",',\n      'c.column_default as \"Default\",',\n      'c.is_nullable as \"Null\",',\n      `(CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\",`,\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\",',\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\"',\n      'FROM information_schema.columns c',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name,',\n      'cu.column_name, tc.constraint_type',\n      'FROM information_schema.TABLE_CONSTRAINTS tc',\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name',\n      'and tc.constraint_name=cu.constraint_name',\n      `and tc.constraint_type='PRIMARY KEY') pk`,\n      'ON pk.table_schema=c.table_schema',\n      'AND pk.table_name=c.table_name',\n      'AND pk.column_name=c.column_name',\n      `WHERE c.table_name = ${this.escape(table.tableName)}`,\n      `AND c.table_schema = ${this.escape(table.schema)}`,\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    // TODO [>=6]: refactor the query to use pg_indexes\n    return joinSQLFragments([\n      'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey,',\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid)',\n      'AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a , pg_namespace s',\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND',\n      `t.relkind = 'r' and t.relname = ${this.escape(table.tableName)}`,\n      `AND s.oid = t.relnamespace AND s.nspname = ${this.escape(table.schema)}`,\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;',\n    ]);\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options?.cascade && options?.concurrently) {\n      throw new Error(`Cannot specify both concurrently and cascade options in removeIndexQuery for ${this.dialect.name} dialect`);\n    }\n\n    let indexName;\n    const table = this.extractTableDetails(tableName);\n    if (Array.isArray(indexNameOrAttributes)) {\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.concurrently ? 'CONCURRENTLY' : '',\n      options?.ifExists ? 'IF EXISTS' : '',\n      `${this.quoteIdentifier(table.schema!)}.${this.quoteIdentifier(indexName)}`,\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiC;AACjC,oBAAkC;AAClC,6BAAuC;AAMhC,MAAM,yCAAyC,8CAAuB;AAAA,EAC3E,mBAAmB,WAA6B;AAC9C,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,wBAAwB,KAAK,OAAO,MAAM,SAAS;AAAA,MACnD,wBAAwB,KAAK,OAAO,MAAM,MAAM;AAAA,IAClD,CAAC;AAAA,EACH;AAAA,EAEA,iBAAiB,WAA6B;AAC5C,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAGhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,mCAAmC,KAAK,OAAO,MAAM,SAAS;AAAA,MAC9D,8CAA8C,KAAK,OAAO,MAAM,MAAM;AAAA,MACtE;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,iBACE,WACA,uBACA,SACA;AACA,SAAI,mCAAS,aAAW,mCAAS,eAAc;AAC7C,YAAM,IAAI,MAAM,gFAAgF,KAAK,QAAQ,cAAc;AAAA,IAC7H;AAEA,QAAI;AACJ,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAChD,QAAI,MAAM,QAAQ,qBAAqB,GAAG;AACxC,sBAAY,iCAAkB,OAAO,EAAE,QAAQ,sBAAsB,CAAC;AAAA,IACxE,OAAO;AACL,kBAAY;AAAA,IACd;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,OACA,mCAAS,gBAAe,iBAAiB;AAAA,OACzC,mCAAS,YAAW,cAAc;AAAA,MAClC,GAAG,KAAK,gBAAgB,MAAM,MAAO,KAAK,KAAK,gBAAgB,SAAS;AAAA,OACxE,mCAAS,WAAU,YAAY;AAAA,IACjC,CAAC;AAAA,EACH;AACF;",
  "names": []
}
