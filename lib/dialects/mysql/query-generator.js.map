{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { addTicks } from '../../utils/dialect';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { defaultValueSchemable } from '../../utils/query-builder-utils';\nimport { Cast, Json } from '../../utils/sequelize-method';\nimport { underscore } from '../../utils/string';\nimport { attributeTypeToSql, normalizeDataType } from '../abstract/data-types-utils';\nimport {\n  ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n  REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n} from '../abstract/query-generator';\n\nconst _ = require('lodash');\nconst { MySqlQueryGeneratorTypeScript } = require('./query-generator-typescript');\nconst { Op } = require('../../operators');\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[&|]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName',\n].join(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\nconst ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set();\nconst REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set();\n\nexport class MySqlQueryGenerator extends MySqlQueryGeneratorTypeScript {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP',\n    };\n  }\n\n  createSchemaQuery(schemaName, options) {\n    return joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schemaName),\n      options?.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options?.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';',\n    ]);\n  }\n\n  dropSchemaQuery(schemaName) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schemaName)};`;\n  }\n\n  // TODO: typescript - protected\n  _getTechnicalSchemaNames() {\n    return ['MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS', 'mysql', 'information_schema', 'performance_schema', 'sys'];\n  }\n\n  listSchemasQuery(options) {\n    const schemasToSkip = this._getTechnicalSchemaNames();\n\n    if (Array.isArray(options?.skip)) {\n      schemasToSkip.push(...options.skip);\n    }\n\n    return joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')})`,\n      ';',\n    ]);\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null,\n      ...options,\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        continue;\n      }\n\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // MySQL doesn't support inline REFERENCES declarations: move to the end\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (typeof indexName !== 'string') {\n          indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n        }\n\n        attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field))\n          .join(', ')})`;\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';',\n    ]);\n  }\n\n  showTablesQuery(schemaName) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (schemaName) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(schemaName)}`;\n    } else {\n      const technicalSchemas = this._getTechnicalSchemaNames();\n\n      query += ` AND TABLE_SCHEMA NOT IN (${technicalSchemas.map(schema => this.escape(schema)).join(', ')})`;\n    }\n\n    return `${query};`;\n  }\n\n  tableExistsQuery(table) {\n    // remove first & last `, then escape as SQL string\n    const tableName = this.escape(this.quoteTable(table).slice(1, -1));\n\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${tableName} AND TABLE_SCHEMA = ${this.escape(this.sequelize.config.database)}`;\n  }\n\n  addColumnQuery(table, key, dataType, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'addColumnQuery',\n        this.dialect.name,\n        ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    dataType = {\n      ...dataType,\n      type: normalizeDataType(dataType.type, this.dialect),\n    };\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key,\n      }),\n      ';',\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeColumnQuery',\n        this.dialect.name,\n        REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';',\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'CHANGE',\n      attrString.join(', '),\n      ';',\n    ]);\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n\n        return conditions.join(' AND ');\n      }\n\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += ` = ${this.escape(smth.value, undefined, options)}`;\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        smth.type = 'char';\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = 'decimal';\n      } else if (/text/i.test(smth.type)) {\n        smth.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  _toJSONValue(value) {\n    // true/false are stored as strings in mysql\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n\n    // null is stored as a string in mysql\n    if (value === null) {\n      return 'null';\n    }\n\n    return value;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    where = this.getWhereConditions(where, null, model, options);\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n\n    if (options.limit) {\n      query += ` LIMIT ${this.escape(options.limit, undefined, _.pick(options, ['bind', 'replacements']))}`;\n    }\n\n    return query;\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';',\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute,\n      };\n    }\n\n    const attributeString = attributeTypeToSql(attribute.type, { escape: this.escape.bind(this), dialect: this.dialect });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const fkName = this.quoteIdentifier(`${this.extractTableDetails(options.tableName).tableName}_${options.foreignKey}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${this.quoteIdentifier(options.foreignKey)})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.slice(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param {object} table The table.\n   * @returns {string} The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table) {\n    const tableName = table.tableName || table;\n    // TODO (https://github.com/sequelize/sequelize/pull/14687): use dialect.getDefaultSchema() instead of this.sequelize.config.database\n    const schemaName = table.schema || this.sequelize.config.database;\n\n    return joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';',\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`,\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ],\n      ')',\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';',\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {string}               column  The JSON column\n   * @param   {string|Array<string>} [path]  The path to extract (optional)\n   * @returns {string}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    let paths = _.toPath(path);\n    const quotedColumn = this.isIdentifierQuoted(column)\n      ? column\n      : this.quoteIdentifier(column);\n\n    /**\n     * Non digit sub paths need to be quoted as ECMAScript identifiers\n     * https://bugs.mysql.com/bug.php?id=81896\n     */\n    paths = paths.map(subPath => {\n      return /\\D/.test(subPath)\n        ? addTicks(subPath, '\"')\n        : subPath;\n    });\n\n    const pathStr = this.escape(['$']\n      .concat(paths)\n      .join('.')\n      .replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\n\n    return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\n  }\n}\n\n/**\n * @param {string} identifier\n * @deprecated use \"escape\" or \"escapeString\" on QueryGenerator\n */\nfunction wrapSingleQuote(identifier) {\n  return addTicks(identifier, '\\'');\n}\n"],
  "mappings": "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",
  "names": []
}
