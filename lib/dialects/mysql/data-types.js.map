{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/data-types.ts"],
  "sourcesContent": ["import dayjs from 'dayjs';\nimport wkx from 'wkx';\nimport type { Falsy } from '../../generic/falsy.js';\nimport type { GeoJson } from '../../geo-json.js';\nimport { isString } from '../../utils/check.js';\nimport { isValidTimeZone } from '../../utils/dayjs';\nimport * as BaseTypes from '../abstract/data-types.js';\nimport type {\n  AcceptedDate,\n  StringifyOptions,\n  ToSqlOptions,\n  BindParamOptions,\n} from '../abstract/data-types.js';\n\nexport class FLOAT extends BaseTypes.FLOAT {\n  protected getNumberSqlTypeName(): string {\n    return 'FLOAT';\n  }\n\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class DOUBLE extends BaseTypes.DOUBLE {\n  protected getNumberSqlTypeName(): string {\n    return 'DOUBLE PRECISION';\n  }\n\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\n/** @deprecated */\nexport class REAL extends BaseTypes.REAL {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class DECIMAL extends BaseTypes.DECIMAL {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class TINYINT extends BaseTypes.TINYINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class SMALLINT extends BaseTypes.SMALLINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class MEDIUMINT extends BaseTypes.MEDIUMINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class INTEGER extends BaseTypes.INTEGER {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class BIGINT extends BaseTypes.BIGINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class BOOLEAN extends BaseTypes.BOOLEAN {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n\n  escape(value: boolean | Falsy): string {\n    // must be 'true' & 'false' when inlining so the values are compatible with the 'IS' operator\n    return value ? 'true' : 'false';\n  }\n\n  toBindableValue(value: boolean | Falsy): unknown {\n    // when binding, must be an integer\n    return value ? 1 : 0;\n  }\n}\n\nexport class DATE extends BaseTypes.DATE {\n  toBindableValue(date: AcceptedDate, options: StringifyOptions) {\n    date = this._applyTimezone(date, options);\n\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n  }\n\n  sanitize(value: unknown, options?: { timezone?: string }): unknown {\n    if (isString(value) && options?.timezone) {\n      if (isValidTimeZone(options.timezone)) {\n        return dayjs.tz(value, options.timezone).toDate();\n      }\n\n      return new Date(`${value} ${options.timezone}`);\n    }\n\n    return super.sanitize(value);\n  }\n}\n\nexport class UUID extends BaseTypes.UUID {\n  // TODO: add check constraint to enforce GUID format\n  toSql() {\n    return 'CHAR(36) BINARY';\n  }\n}\n\nexport class GEOMETRY extends BaseTypes.GEOMETRY {\n  toBindableValue(value: GeoJson, options: StringifyOptions) {\n    return `ST_GeomFromText(${options.dialect.escapeString(\n      wkx.Geometry.parseGeoJSON(value).toWkt(),\n    )})`;\n  }\n\n  getBindParamSql(value: GeoJson, options: BindParamOptions) {\n    return `ST_GeomFromText(${options.bindParam(\n      wkx.Geometry.parseGeoJSON(value).toWkt(),\n    )})`;\n  }\n\n  toSql() {\n    return this.options.type?.toUpperCase() || 'GEOMETRY';\n  }\n}\n\nexport class ENUM<Member extends string> extends BaseTypes.ENUM<Member> {\n  toSql(options: ToSqlOptions) {\n    return `ENUM(${this.options.values.map(value => options.dialect.escapeString(value)).join(', ')})`;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_dayjs", "dayjs", "wkx"]
}
