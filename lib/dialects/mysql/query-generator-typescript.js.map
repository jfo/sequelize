{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query-generator-typescript.ts"],
  "sourcesContent": ["import { Op } from '../../operators.js';\nimport type { Expression } from '../../sequelize.js';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type { RemoveIndexQueryOptions, TableNameOrModel, QueryGeneratorOptions, EscapeOptions } from '../abstract/query-generator-typescript';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>();\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class MySqlQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  constructor(options: QueryGeneratorOptions) {\n    super(options);\n\n    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP');\n    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP');\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    return `SHOW INDEX FROM ${this.quoteTable(tableName)}`;\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return `DROP INDEX ${this.quoteIdentifier(indexName)} ON ${this.quoteTable(tableName)}`;\n  }\n\n  jsonPathExtractionQuery(sqlExpression: string, path: ReadonlyArray<number | string>, unquote: boolean): string {\n    let jsonPathStr = '$';\n    for (const pathElement of path) {\n      if (typeof pathElement === 'number') {\n        jsonPathStr += `[${pathElement}]`;\n      } else {\n        jsonPathStr += `.${this.#quoteJsonPathIdentifier(pathElement)}`;\n      }\n    }\n\n    const extractQuery = `json_extract(${sqlExpression},${this.escape(jsonPathStr)})`;\n    if (unquote) {\n      return `json_unquote(${extractQuery})`;\n    }\n\n    return extractQuery;\n  }\n\n  formatUnquoteJson(arg: Expression, options?: EscapeOptions) {\n    return `json_unquote(${this.escape(arg, options)})`;\n  }\n\n  #quoteJsonPathIdentifier(identifier: string): string {\n    if (/^[a-z_][a-z0-9_]*$/i.test(identifier)) {\n      return identifier;\n    }\n\n    // Escape backslashes and double quotes\n    return `\"${identifier.replace(/[\"\\\\]/g, s => `\\\\${s}`)}\"`;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmB;AAEnB,mBAAqC;AACrC,oBAAkC;AAClC,6BAAuC;AACvC,wCAAuD;AAGvD,MAAM,uCAAuC,oBAAI,IAAmC;AAK7E,MAAM,sCAAsC,8CAAuB;AAAA,EACxE,YAAY,SAAgC;AAC1C,UAAM,OAAO;AAEb,SAAK,gBAAgB,mBAAmB,oBAAG,QAAQ,QAAQ;AAC3D,SAAK,gBAAgB,mBAAmB,oBAAG,WAAW,YAAY;AAAA,EACpE;AAAA,EAEA,mBAAmB,WAA6B;AAC9C,WAAO,0BAA0B,KAAK,WAAW,SAAS;AAAA,EAC5D;AAAA,EAEA,iBAAiB,WAA6B;AAC5C,WAAO,mBAAmB,KAAK,WAAW,SAAS;AAAA,EACrD;AAAA,EAEA,iBACE,WACA,uBACA,SACA;AACA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,MAAM,QAAQ,qBAAqB,GAAG;AACxC,YAAM,QAAQ,KAAK,oBAAoB,SAAS;AAChD,sBAAY,iCAAkB,OAAO,EAAE,QAAQ,sBAAsB,CAAC;AAAA,IACxE,OAAO;AACL,kBAAY;AAAA,IACd;AAEA,WAAO,cAAc,KAAK,gBAAgB,SAAS,QAAQ,KAAK,WAAW,SAAS;AAAA,EACtF;AAAA,EAEA,wBAAwB,eAAuB,MAAsC,SAA0B;AAC7G,QAAI,cAAc;AAClB,eAAW,eAAe,MAAM;AAC9B,UAAI,OAAO,gBAAgB,UAAU;AACnC,uBAAe,IAAI;AAAA,MACrB,OAAO;AACL,uBAAe,IAAI,KAAK,yBAAyB,WAAW;AAAA,MAC9D;AAAA,IACF;AAEA,UAAM,eAAe,gBAAgB,iBAAiB,KAAK,OAAO,WAAW;AAC7E,QAAI,SAAS;AACX,aAAO,gBAAgB;AAAA,IACzB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,kBAAkB,KAAiB,SAAyB;AAC1D,WAAO,gBAAgB,KAAK,OAAO,KAAK,OAAO;AAAA,EACjD;AAAA,EAEA,yBAAyB,YAA4B;AACnD,QAAI,sBAAsB,KAAK,UAAU,GAAG;AAC1C,aAAO;AAAA,IACT;AAGA,WAAO,IAAI,WAAW,QAAQ,UAAU,OAAK,KAAK,GAAG;AAAA,EACvD;AACF;",
  "names": []
}
