{
  "version": 3,
  "sources": ["../src/sequelize-typescript.ts"],
  "sourcesContent": ["import { AsyncLocalStorage } from 'node:async_hooks';\nimport { initDecoratedAssociations } from './decorators/legacy/associations.js';\nimport { initDecoratedModel } from './decorators/shared/model.js';\nimport type { Connection } from './dialects/abstract/connection-manager.js';\nimport type { AbstractQuery } from './dialects/abstract/query.js';\nimport {\n  legacyBuildHasHook,\n  legacyBuildAddAnyHook,\n  legacyBuildRunHook,\n  legacyBuildRemoveHook,\n  legacyBuildAddHook,\n} from './hooks-legacy.js';\nimport type { AsyncHookReturn, HookHandler } from './hooks.js';\nimport { HookHandlerBuilder } from './hooks.js';\nimport type { ModelHooks } from './model-hooks.js';\nimport { validModelHooks } from './model-hooks.js';\nimport type { ConnectionOptions, Options, Sequelize } from './sequelize.js';\nimport type { TransactionOptions } from './transaction.js';\nimport { Transaction } from './transaction.js';\nimport type { ModelAttributes, ModelOptions, ModelStatic, QueryOptions, SyncOptions } from '.';\n\nexport interface SequelizeHooks extends ModelHooks {\n  /**\n   * A hook that is run at the start of {@link Sequelize#define} and {@link Model.init}\n   */\n  beforeDefine(attributes: ModelAttributes, options: ModelOptions): void;\n\n  /**\n   * A hook that is run at the end of {@link Sequelize#define} and {@link Model.init}\n   */\n  afterDefine(model: ModelStatic): void;\n\n  /**\n   * A hook that is run before a connection is created\n   */\n  beforeConnect(config: ConnectionOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run after a connection is created\n   */\n  afterConnect(connection: Connection, config: ConnectionOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run before a connection is disconnected\n   */\n  beforeDisconnect(connection: Connection): AsyncHookReturn;\n\n  /**\n   * A hook that is run after a connection is disconnected\n   */\n  afterDisconnect(connection: unknown): AsyncHookReturn;\n  beforeQuery(options: QueryOptions, query: AbstractQuery): AsyncHookReturn;\n  afterQuery(options: QueryOptions, query: AbstractQuery): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the start of {@link Sequelize#sync}\n   */\n  beforeBulkSync(options: SyncOptions): AsyncHookReturn;\n\n  /**\n   * A hook that is run at the end of {@link Sequelize#sync}\n   */\n  afterBulkSync(options: SyncOptions): AsyncHookReturn;\n}\n\nexport interface StaticSequelizeHooks {\n  /**\n   * A hook that is run at the beginning of the creation of a Sequelize instance.\n   */\n  beforeInit(options: Options): void;\n\n  /**\n   * A hook that is run at the end of the creation of a Sequelize instance.\n   */\n  afterInit(sequelize: Sequelize): void;\n}\n\nconst staticSequelizeHooks = new HookHandlerBuilder<StaticSequelizeHooks>([\n  'beforeInit', 'afterInit',\n]);\n\nconst instanceSequelizeHooks = new HookHandlerBuilder<SequelizeHooks>([\n  'beforeQuery', 'afterQuery',\n  'beforeBulkSync', 'afterBulkSync',\n  'beforeConnect', 'afterConnect',\n  'beforeDisconnect', 'afterDisconnect',\n  'beforeDefine', 'afterDefine',\n  ...validModelHooks,\n]);\n\ntype TransactionCallback<T> = (t: Transaction) => PromiseLike<T> | T;\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the Sequelize class to TypeScript by slowly moving its functions here.\n * Always use {@link Sequelize} instead.\n */\nexport abstract class SequelizeTypeScript {\n  static get hooks(): HookHandler<StaticSequelizeHooks> {\n    return staticSequelizeHooks.getFor(this);\n  }\n\n  static addHook = legacyBuildAddAnyHook(staticSequelizeHooks);\n  static removeHook = legacyBuildRemoveHook(staticSequelizeHooks);\n  static hasHook = legacyBuildHasHook(staticSequelizeHooks);\n  static hasHooks = legacyBuildHasHook(staticSequelizeHooks);\n  static runHooks = legacyBuildRunHook(staticSequelizeHooks);\n\n  static beforeInit = legacyBuildAddHook(staticSequelizeHooks, 'beforeInit');\n  static afterInit = legacyBuildAddHook(staticSequelizeHooks, 'afterInit');\n\n  get hooks(): HookHandler<SequelizeHooks> {\n    return instanceSequelizeHooks.getFor(this);\n  }\n\n  addHook = legacyBuildAddAnyHook(instanceSequelizeHooks);\n  removeHook = legacyBuildRemoveHook(instanceSequelizeHooks);\n  hasHook = legacyBuildHasHook(instanceSequelizeHooks);\n  hasHooks = legacyBuildHasHook(instanceSequelizeHooks);\n  runHooks = legacyBuildRunHook(instanceSequelizeHooks);\n\n  beforeQuery = legacyBuildAddHook(instanceSequelizeHooks, 'beforeQuery');\n  afterQuery = legacyBuildAddHook(instanceSequelizeHooks, 'afterQuery');\n\n  beforeBulkSync = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkSync');\n  afterBulkSync = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkSync');\n\n  beforeConnect = legacyBuildAddHook(instanceSequelizeHooks, 'beforeConnect');\n  afterConnect = legacyBuildAddHook(instanceSequelizeHooks, 'afterConnect');\n\n  beforeDisconnect = legacyBuildAddHook(instanceSequelizeHooks, 'beforeDisconnect');\n  afterDisconnect = legacyBuildAddHook(instanceSequelizeHooks, 'afterDisconnect');\n\n  beforeDefine = legacyBuildAddHook(instanceSequelizeHooks, 'beforeDefine');\n  afterDefine = legacyBuildAddHook(instanceSequelizeHooks, 'afterDefine');\n\n  beforeValidate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeValidate');\n  afterValidate = legacyBuildAddHook(instanceSequelizeHooks, 'afterValidate');\n  validationFailed = legacyBuildAddHook(instanceSequelizeHooks, 'validationFailed');\n\n  beforeCreate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeCreate');\n  afterCreate = legacyBuildAddHook(instanceSequelizeHooks, 'afterCreate');\n\n  beforeDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'beforeDestroy');\n  afterDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'afterDestroy');\n\n  beforeRestore = legacyBuildAddHook(instanceSequelizeHooks, 'beforeRestore');\n  afterRestore = legacyBuildAddHook(instanceSequelizeHooks, 'afterRestore');\n\n  beforeUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeUpdate');\n  afterUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'afterUpdate');\n\n  beforeUpsert = legacyBuildAddHook(instanceSequelizeHooks, 'beforeUpsert');\n  afterUpsert = legacyBuildAddHook(instanceSequelizeHooks, 'afterUpsert');\n\n  beforeSave = legacyBuildAddHook(instanceSequelizeHooks, 'beforeSave');\n  afterSave = legacyBuildAddHook(instanceSequelizeHooks, 'afterSave');\n\n  beforeBulkCreate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkCreate');\n  afterBulkCreate = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkCreate');\n\n  beforeBulkDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkDestroy');\n  afterBulkDestroy = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkDestroy');\n\n  beforeBulkRestore = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkRestore');\n  afterBulkRestore = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkRestore');\n\n  beforeBulkUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeBulkUpdate');\n  afterBulkUpdate = legacyBuildAddHook(instanceSequelizeHooks, 'afterBulkUpdate');\n\n  beforeCount = legacyBuildAddHook(instanceSequelizeHooks, 'beforeCount');\n\n  beforeFind = legacyBuildAddHook(instanceSequelizeHooks, 'beforeFind');\n  beforeFindAfterExpandIncludeAll = legacyBuildAddHook(instanceSequelizeHooks, 'beforeFindAfterExpandIncludeAll');\n  beforeFindAfterOptions = legacyBuildAddHook(instanceSequelizeHooks, 'beforeFindAfterOptions');\n  afterFind = legacyBuildAddHook(instanceSequelizeHooks, 'afterFind');\n\n  beforeSync = legacyBuildAddHook(instanceSequelizeHooks, 'beforeSync');\n  afterSync = legacyBuildAddHook(instanceSequelizeHooks, 'afterSync');\n\n  beforeAssociate = legacyBuildAddHook(instanceSequelizeHooks, 'beforeAssociate');\n  afterAssociate = legacyBuildAddHook(instanceSequelizeHooks, 'afterAssociate');\n\n  #transactionCls: AsyncLocalStorage<Transaction> | undefined;\n\n  private _setupTransactionCls() {\n    this.#transactionCls = new AsyncLocalStorage<Transaction>();\n  }\n\n  addModels(models: ModelStatic[]) {\n    for (const model of models) {\n      initDecoratedModel(\n        model,\n        // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n        this,\n      );\n    }\n\n    for (const model of models) {\n      initDecoratedAssociations(\n        model,\n        // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n        this,\n      );\n    }\n  }\n\n  /**\n   * Returns the transaction that is associated to the current asynchronous operation.\n   * This method returns undefined if no transaction is active in the current asynchronous operation,\n   * or if {@link Options.disableClsTransactions} is true.\n   */\n  getCurrentClsTransaction(): Transaction | undefined {\n    return this.#transactionCls?.getStore();\n  }\n\n  /**\n   * Start a managed transaction: Sequelize will create a transaction, pass it to your callback, and commit\n   * it once the promise returned by your callback resolved, or execute a rollback if the promise rejects.\n   *\n   * ```ts\n   * try {\n   *   await sequelize.transaction(() => {\n   *     const user = await User.findOne(...);\n   *     await user.update(...);\n   *   });\n   *\n   *   // By now, the transaction has been committed\n   * } catch {\n   *   // If the transaction callback threw an error, the transaction has been rolled back\n   * }\n   * ```\n   *\n   * By default, Sequelize uses AsyncLocalStorage to automatically pass the transaction to all queries executed inside the callback (unless you already pass one or set the `transaction` option to null).\n   * This can be disabled by setting {@link Options.disableClsTransactions} to true. You will then need to pass transactions to your queries manually.\n   *\n   * ```ts\n   * const sequelize = new Sequelize({\n   *   // ...\n   *   disableClsTransactions: true,\n   * })\n   *\n   * await sequelize.transaction(transaction => {\n   *   // transactions are not automatically passed around anymore, you need to do it yourself:\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   * });\n   * ```\n   *\n   * If you want to manage your transaction yourself, use {@link startUnmanagedTransaction}.\n   *\n   * @param callback Async callback during which the transaction will be active\n   */\n  transaction<T>(callback: TransactionCallback<T>): Promise<T>;\n  /**\n   * @param options Transaction Options\n   * @param callback Async callback during which the transaction will be active\n   */\n  transaction<T>(options: TransactionOptions, callback: TransactionCallback<T>): Promise<T>;\n  async transaction<T>(\n    optionsOrCallback: TransactionOptions | TransactionCallback<T>,\n    maybeCallback?: TransactionCallback<T>,\n  ): Promise<T> {\n    let options: TransactionOptions;\n    let callback: TransactionCallback<T>;\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      callback = maybeCallback!;\n      options = optionsOrCallback;\n    }\n\n    if (!callback) {\n      throw new Error('sequelize.transaction requires a callback. If you wish to start an unmanaged transaction, please use sequelize.startUnmanagedTransaction instead');\n    }\n\n    const transaction = new Transaction(\n      // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n      this,\n      options,\n    );\n\n    const wrappedCallback = async () => {\n      await transaction.prepareEnvironment();\n\n      let result;\n      try {\n        result = await callback(transaction);\n      } catch (error) {\n        try {\n          await transaction.rollback();\n        } catch {\n          // ignore, because 'rollback' will already print the error before killing the connection\n        }\n\n        throw error;\n      }\n\n      await transaction.commit();\n\n      return result;\n    };\n\n    const cls = this.#transactionCls;\n    if (!cls) {\n      return wrappedCallback();\n    }\n\n    return cls.run(transaction, wrappedCallback);\n  }\n\n  /**\n   * We highly recommend using {@link Sequelize#transaction} instead.\n   * If you really want to use the manual solution, don't forget to commit or rollback your transaction once you are done with it.\n   *\n   * Transactions started by this method are not automatically passed to queries. You must pass the transaction object manually,\n   * even if {@link Options.disableClsTransactions} is false.\n   *\n   * @example\n   * ```ts\n   * try {\n   *   const transaction = await sequelize.startUnmanagedTransaction();\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   *   await transaction.commit();\n   * } catch(err) {\n   *   await transaction.rollback();\n   * }\n   * ```\n   *\n   * @param options\n   */\n  async startUnmanagedTransaction(options?: TransactionOptions): Promise<Transaction> {\n    const transaction = new Transaction(\n      // @ts-expect-error -- remove once this class has been merged back with the Sequelize class\n      this,\n      options,\n    );\n\n    await transaction.prepareEnvironment();\n\n    return transaction;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
