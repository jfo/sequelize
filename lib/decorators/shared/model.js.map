{
  "version": 3,
  "sources": ["../../../src/decorators/shared/model.ts"],
  "sourcesContent": ["import { mergeModelOptions } from '../../model-definition.js';\nimport { initModel } from '../../model-typescript.js';\nimport type { AttributeOptions, ModelAttributes, ModelOptions, ModelStatic } from '../../model.js';\nimport type { Sequelize } from '../../sequelize.js';\nimport { getAllOwnEntries } from '../../utils/object.js';\n\ninterface RegisteredOptions {\n  model: ModelOptions;\n  attributes: { [key: string]: Partial<AttributeOptions> };\n}\n\nconst registeredOptions = new WeakMap<ModelStatic, RegisteredOptions>();\n\n/**\n * Registers model options for future registering of the Model using Model.init\n * Subsequent calls for the same model & attributeName will be merged, with the newer call taking precedence.\n * 'sequelize' option is not accepted here. Pass it through `Model.init` when registering the model.\n *\n * @param model\n * @param options\n */\nexport function registerModelOptions(\n  model: ModelStatic,\n  options: ModelOptions,\n): void {\n  if (!registeredOptions.has(model)) {\n    registeredOptions.set(model, { model: options, attributes: {} });\n\n    return;\n  }\n\n  // merge-able: scopes, indexes\n  const existingModelOptions = registeredOptions.get(model)!.model;\n\n  try {\n    mergeModelOptions(existingModelOptions, options, false);\n  } catch (error) {\n    // TODO [TS 4.8]: remove this \"as Error\" cast once support for TS < 4.8 is dropped, as the typing of \"cause\" has been fixed in TS 4.8\n    throw new Error(`Multiple decorators are trying to register conflicting options on model ${model.name}`, { cause: error as Error });\n  }\n}\n\n/**\n * Registers attribute options for future registering of the Model using Model.init\n * Subsequent calls for the same model & attributeName will be merged, with the newer call taking precedence.\n *\n * @param model\n * @param attributeName\n * @param options\n */\nexport function registerModelAttributeOptions(\n  model: ModelStatic,\n  attributeName: string,\n  options: Partial<AttributeOptions>,\n): void {\n  if (!registeredOptions.has(model)) {\n    registeredOptions.set(model, {\n      model: {},\n      attributes: {\n        [attributeName]: options,\n      },\n    });\n\n    return;\n  }\n\n  const existingAttributesOptions = registeredOptions.get(model)!.attributes;\n  if (!(attributeName in existingAttributesOptions)) {\n    existingAttributesOptions[attributeName] = options;\n\n    return;\n  }\n\n  const existingOptions = existingAttributesOptions[attributeName]!;\n\n  for (const [optionName, optionValue] of Object.entries(options)) {\n    if (!(optionName in existingOptions)) {\n      // @ts-expect-error -- runtime type checking is enforced by model\n      existingOptions[optionName] = optionValue;\n      continue;\n    }\n\n    // These are objects. We merge their properties, unless the same key is used in both values.\n    if (optionName === 'validate') {\n      // @ts-expect-error -- dynamic type, not worth typing\n      for (const [subOptionName, subOptionValue] of getAllOwnEntries(optionValue)) {\n        if (subOptionName in existingOptions[optionName]!) {\n          throw new Error(`Multiple decorators are attempting to register option ${optionName}[${JSON.stringify(subOptionName)}] of attribute ${attributeName} on model ${model.name}.`);\n        }\n\n        // @ts-expect-error -- runtime type checking is enforced by model\n        existingOptions[optionName][subOptionName] = subOptionValue;\n      }\n\n      continue;\n    }\n\n    if (optionName === 'index' || optionName === 'unique') {\n      if (!existingOptions[optionName]) {\n        existingOptions[optionName] = [];\n      } else if (!Array.isArray(existingOptions[optionName])) {\n        // @ts-expect-error -- runtime type checking is enforced by model\n        existingOptions[optionName] = [existingOptions[optionName]];\n      }\n\n      if (Array.isArray(optionValue)) {\n        // @ts-expect-error -- runtime type checking is enforced by model\n        existingOptions[optionName] = [...existingOptions[optionName], ...optionValue];\n      } else {\n        existingOptions[optionName] = [...existingOptions[optionName], optionValue];\n      }\n\n      continue;\n    }\n\n    // @ts-expect-error -- dynamic type, not worth typing\n    if (optionValue === existingOptions[optionName]) {\n      continue;\n    }\n\n    throw new Error(`Multiple decorators are attempting to set different values for the option ${optionName} of attribute ${attributeName} on model ${model.name}.`);\n  }\n}\n\nexport function initDecoratedModel(model: ModelStatic, sequelize: Sequelize): void {\n  const { model: modelOptions, attributes: attributeOptions = {} } = registeredOptions.get(model) ?? {};\n\n  initModel(model, attributeOptions as ModelAttributes, {\n    ...modelOptions,\n    sequelize,\n  });\n}\n\nexport function isDecoratedModel(model: ModelStatic): boolean {\n  return registeredOptions.has(model);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkC;AAClC,8BAA0B;AAG1B,oBAAiC;AAOjC,MAAM,oBAAoB,oBAAI,QAAwC;AAU/D,SAAS,qBACd,OACA,SACM;AACN,MAAI,CAAC,kBAAkB,IAAI,KAAK,GAAG;AACjC,sBAAkB,IAAI,OAAO,EAAE,OAAO,SAAS,YAAY,CAAC,EAAE,CAAC;AAE/D;AAAA,EACF;AAGA,QAAM,uBAAuB,kBAAkB,IAAI,KAAK,EAAG;AAE3D,MAAI;AACF,mDAAkB,sBAAsB,SAAS,KAAK;AAAA,EACxD,SAAS,OAAP;AAEA,UAAM,IAAI,MAAM,2EAA2E,MAAM,QAAQ,EAAE,OAAO,MAAe,CAAC;AAAA,EACpI;AACF;AAUO,SAAS,8BACd,OACA,eACA,SACM;AACN,MAAI,CAAC,kBAAkB,IAAI,KAAK,GAAG;AACjC,sBAAkB,IAAI,OAAO;AAAA,MAC3B,OAAO,CAAC;AAAA,MACR,YAAY;AAAA,QACV,CAAC,aAAa,GAAG;AAAA,MACnB;AAAA,IACF,CAAC;AAED;AAAA,EACF;AAEA,QAAM,4BAA4B,kBAAkB,IAAI,KAAK,EAAG;AAChE,MAAI,EAAE,iBAAiB,4BAA4B;AACjD,8BAA0B,aAAa,IAAI;AAE3C;AAAA,EACF;AAEA,QAAM,kBAAkB,0BAA0B,aAAa;AAE/D,aAAW,CAAC,YAAY,WAAW,KAAK,OAAO,QAAQ,OAAO,GAAG;AAC/D,QAAI,EAAE,cAAc,kBAAkB;AAEpC,sBAAgB,UAAU,IAAI;AAC9B;AAAA,IACF;AAGA,QAAI,eAAe,YAAY;AAE7B,iBAAW,CAAC,eAAe,cAAc,SAAK,gCAAiB,WAAW,GAAG;AAC3E,YAAI,iBAAiB,gBAAgB,UAAU,GAAI;AACjD,gBAAM,IAAI,MAAM,yDAAyD,cAAc,KAAK,UAAU,aAAa,mBAAmB,0BAA0B,MAAM,OAAO;AAAA,QAC/K;AAGA,wBAAgB,UAAU,EAAE,aAAa,IAAI;AAAA,MAC/C;AAEA;AAAA,IACF;AAEA,QAAI,eAAe,WAAW,eAAe,UAAU;AACrD,UAAI,CAAC,gBAAgB,UAAU,GAAG;AAChC,wBAAgB,UAAU,IAAI,CAAC;AAAA,MACjC,WAAW,CAAC,MAAM,QAAQ,gBAAgB,UAAU,CAAC,GAAG;AAEtD,wBAAgB,UAAU,IAAI,CAAC,gBAAgB,UAAU,CAAC;AAAA,MAC5D;AAEA,UAAI,MAAM,QAAQ,WAAW,GAAG;AAE9B,wBAAgB,UAAU,IAAI,CAAC,GAAG,gBAAgB,UAAU,GAAG,GAAG,WAAW;AAAA,MAC/E,OAAO;AACL,wBAAgB,UAAU,IAAI,CAAC,GAAG,gBAAgB,UAAU,GAAG,WAAW;AAAA,MAC5E;AAEA;AAAA,IACF;AAGA,QAAI,gBAAgB,gBAAgB,UAAU,GAAG;AAC/C;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,6EAA6E,2BAA2B,0BAA0B,MAAM,OAAO;AAAA,EACjK;AACF;AAEO,SAAS,mBAAmB,OAAoB,WAA4B;AACjF,QAAM,EAAE,OAAO,cAAc,YAAY,mBAAmB,CAAC,EAAE,IAAI,kBAAkB,IAAI,KAAK,KAAK,CAAC;AAEpG,yCAAU,OAAO,kBAAqC;AAAA,IACpD,GAAG;AAAA,IACH;AAAA,EACF,CAAC;AACH;AAEO,SAAS,iBAAiB,OAA6B;AAC5D,SAAO,kBAAkB,IAAI,KAAK;AACpC;",
  "names": []
}
