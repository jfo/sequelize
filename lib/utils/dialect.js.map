{
  "version": 3,
  "sources": ["../../src/utils/dialect.ts"],
  "sourcesContent": ["import { randomUUID } from 'node:crypto';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { v1 as uuidv1 } from 'uuid';\nimport type { AbstractDialect } from '../dialects/abstract';\nimport * as DataTypes from '../dialects/abstract/data-types.js';\n\nexport function toDefaultValue(value: unknown, dialect: AbstractDialect): unknown {\n  if (typeof value === 'function') {\n    const tmp = value();\n    if (tmp instanceof DataTypes.AbstractDataType) {\n      return tmp.toSql({ dialect });\n    }\n\n    return tmp;\n  }\n\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n\n  if (value instanceof DataTypes.UUIDV4) {\n    return randomUUID();\n  }\n\n  if (value instanceof DataTypes.NOW) {\n    return new Date();\n  }\n\n  if (Array.isArray(value)) {\n    return [...value];\n  }\n\n  if (isPlainObject(value)) {\n    return { ...(value as object) };\n  }\n\n  return value;\n}\n\n/**\n * @deprecated use {@link AbstractDialect#TICK_CHAR_LEFT} and {@link AbstractDialect#TICK_CHAR_RIGHT},\n * or {@link AbstractQueryGenerator#quoteIdentifier}\n */\nexport const TICK_CHAR = '`';\n\n/**\n * @deprecated this is a bad way to quote identifiers and it should not be used anymore.\n * it mangles the input if the input contains identifier quotes, which should not happen.\n * Use {@link quoteIdentifier} instead\n *\n * @param s\n * @param tickChar\n * @returns\n */\nexport function addTicks(s: string, tickChar: string = TICK_CHAR): string {\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\n\n/**\n * @deprecated this is a bad way to quote identifiers and it should not be used anymore.\n * Use {@link quoteIdentifier} instead\n *\n * @param s\n * @param tickChar\n * @returns\n */\nexport function removeTicks(s: string, tickChar: string = TICK_CHAR): string {\n  return s.replace(new RegExp(tickChar, 'g'), '');\n}\n\nexport function quoteIdentifier(identifier: string, leftTick: string, rightTick: string): string {\n  // TODO [engine:node@>14]: drop regexp, use replaceAll with a string instead.\n  const leftTickRegExp = new RegExp(`\\\\${leftTick}`, 'g');\n\n  if (leftTick === rightTick) {\n    return leftTick + identifier.replace(leftTickRegExp, leftTick + leftTick) + rightTick;\n  }\n\n  const rightTickRegExp = new RegExp(`\\\\${rightTick}`, 'g');\n\n  return leftTick\n    + identifier.replace(leftTickRegExp, leftTick + leftTick).replace(rightTickRegExp, rightTick + rightTick)\n    + rightTick;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2B;AAC3B,2BAA0B;AAC1B,kBAA6B;AAE7B,gBAA2B;AAEpB,SAAS,eAAe,OAAgB,SAAmC;AAChF,MAAI,OAAO,UAAU,YAAY;AAC/B,UAAM,MAAM,MAAM;AAClB,QAAI,eAAe,UAAU,kBAAkB;AAC7C,aAAO,IAAI,MAAM,EAAE,QAAQ,CAAC;AAAA,IAC9B;AAEA,WAAO;AAAA,EACT;AAEA,MAAI,iBAAiB,UAAU,QAAQ;AACrC,eAAO,YAAAA,IAAO;AAAA,EAChB;AAEA,MAAI,iBAAiB,UAAU,QAAQ;AACrC,eAAO,+BAAW;AAAA,EACpB;AAEA,MAAI,iBAAiB,UAAU,KAAK;AAClC,WAAO,oBAAI,KAAK;AAAA,EAClB;AAEA,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,CAAC,GAAG,KAAK;AAAA,EAClB;AAEA,UAAI,qBAAAC,SAAc,KAAK,GAAG;AACxB,WAAO,EAAE,GAAI,MAAiB;AAAA,EAChC;AAEA,SAAO;AACT;AAMO,MAAM,YAAY;AAWlB,SAAS,SAAS,GAAW,WAAmB,WAAmB;AACxE,SAAO,WAAW,YAAY,GAAG,QAAQ,IAAI;AAC/C;AAUO,SAAS,YAAY,GAAW,WAAmB,WAAmB;AAC3E,SAAO,EAAE,QAAQ,IAAI,OAAO,UAAU,GAAG,GAAG,EAAE;AAChD;AAEO,SAAS,gBAAgB,YAAoB,UAAkB,WAA2B;AAE/F,QAAM,iBAAiB,IAAI,OAAO,KAAK,YAAY,GAAG;AAEtD,MAAI,aAAa,WAAW;AAC1B,WAAO,WAAW,WAAW,QAAQ,gBAAgB,WAAW,QAAQ,IAAI;AAAA,EAC9E;AAEA,QAAM,kBAAkB,IAAI,OAAO,KAAK,aAAa,GAAG;AAExD,SAAO,WACH,WAAW,QAAQ,gBAAgB,WAAW,QAAQ,EAAE,QAAQ,iBAAiB,YAAY,SAAS,IACtG;AACN;",
  "names": ["uuidv1", "isPlainObject"]
}
